AWSTemplateFormatVersion: "2010-09-09"
Description: "Template to create S3 buckets for Bronze, Silver, and Gold stages in a Data Lake, and AWS Glue resources for data ingestion and ETL jobs, Athena setup, and API for Athena results data"

Resources:
  BronzeBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${AWS::AccountId}-dl-bronze"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  SilverBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${AWS::AccountId}-dl-silver"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  GoldBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${AWS::AccountId}-dl-gold"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  AthenaResultsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${AWS::AccountId}-dl-athena-results"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ScriptBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: "${AWS::AccountId}-scripts"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !GetAtt GlueServiceRole.Arn
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
            Resource:
              - "arn:aws:s3:::${AWS::AccountId}-scripts"
              - "arn:aws:s3:::${AWS::AccountId}-scripts/*"

  GlueDatabase:
    Type: "AWS::Glue::Database"
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseInput:
        Name: "data_lake_db"
        Description: "Glue database for the data lake"

  GlueETLJobIngestJasmin:
    Type: "AWS::Glue::Job"
    Properties:
      Name: "data_lake_jasmin_etl_job_ingest"
      Role: !GetAtt GlueServiceRole.Arn
      Command:
        Name: "glueetl"
        ScriptLocation: !Sub "s3://${AWS::AccountId}-scripts/etl_api_jasmin.py"
        PythonVersion: "3"
      GlueVersion: "3.0"
      DefaultArguments:
        "--TempDir": !Sub "s3://${AWS::AccountId}-temp/"
        "--job-bookmark-option": "job-bookmark-enable"
        "--enable-metrics": ""
      ExecutionProperty:
        MaxConcurrentRuns: 1
        MaxRetries: 1
      Timeout: 2880

  GlueETLJobIngestMongo:
    Type: "AWS::Glue::Job"
    Properties:
      Name: "data_lake_ddbb_etl_job_ingest"
      Role: !GetAtt GlueServiceRole.Arn
      Command:
        Name: "glueetl"
        ScriptLocation: !Sub "s3://${AWS::AccountId}-scripts/etl_mongo_collections.py"
        PythonVersion: "3"
      GlueVersion: "3.0"
      DefaultArguments:
        "--TempDir": !Sub "s3://${AWS::AccountId}-temp/"
        "--job-bookmark-option": "job-bookmark-enable"
        "--enable-metrics": ""
        "--secret-name": "dl/beta/mongoDBRCSecret"
      ExecutionProperty:
        MaxConcurrentRuns: 1
        MaxRetries: 1
      Timeout: 2880

  GlueServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "glue.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "GlueServicePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::AccountId}-dl-*"
                  - !Sub "arn:aws:s3:::${AWS::AccountId}-dl-*/*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - "arn:aws:s3:::${AWS::AccountId}-scripts"
                  - "arn:aws:s3:::${AWS::AccountId}-scripts/*"
              - Effect: "Allow"
                Action:
                  - "glue:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "tag:GetResources"
                  - "tag:TagResources"
                  - "tag:UntagResources"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "iam:CreateRole"
                  - "iam:DeleteRole"
                  - "iam:AttachRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:PassRole"
                  - "iam:PutRolePolicy"
                  - "iam:GetRole"
                Resource: "arn:aws:iam::*:role/DataLake-GlueServiceRole-*"
              - Effect: "Allow"
                Action:
                  - "athena:CreateWorkGroup"
                  - "athena:GetWorkGroup"
                  - "athena:UpdateWorkGroup"
                  - "athena:DeleteWorkGroup"
                  - "athena:ListWorkGroups"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dl/beta/mongoDBRCSecret-C5MJE7"

  BronzeCrawler:
    Type: "AWS::Glue::Crawler"
    Properties:
      Name: "ingest_bronze_jasmin_data"
      Role: !GetAtt GlueServiceRole.Arn
      DatabaseName: "data_lake_db"
      Targets:
        S3Targets:
          - Path: "s3://${AWS::AccountId}-dl-bronze/"

  SilverCrawler:
    Type: "AWS::Glue::Crawler"
    Properties:
      Name: "ingest_silver_jasmin_data"
      Role: !GetAtt GlueServiceRole.Arn
      DatabaseName: "data_lake_db"
      Targets:
        S3Targets:
          - Path: "s3://${AWS::AccountId}-dl-silver/"

  GoldCrawler:
    Type: "AWS::Glue::Crawler"
    Properties:
      Name: "ingest_gold_jasmin_data"
      Role: !GetAtt GlueServiceRole.Arn
      DatabaseName: "data_lake_db"
      Targets:
        S3Targets:
          - Path: "s3://${AWS::AccountId}-dl-gold/"

  AthenaWorkGroup:
    Type: "AWS::Athena::WorkGroup"
    Properties:
      Name: "data-lake-workgroup"
      State: "ENABLED"
      Description: "Work group for Data Lake queries"
      WorkGroupConfiguration:
        BytesScannedCutoffPerQuery: 1000000000
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: true
        RequesterPaysEnabled: false
        ResultConfiguration:
          OutputLocation: !Sub "s3://${AWS::AccountId}-dl-athena-results/"

  AthenaResultsDataLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "GetAthenaResultsData"
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "nodejs14.x"
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();

          exports.handler = async (event) => {
            const params = {
              Bucket: process.env.ATHENA_RESULTS_BUCKET,
              Key: process.env.ATHENA_RESULTS_KEY
            };

            try {
              const data = await s3.getObject(params).promise();
              const json = JSON.parse(data.Body.toString('utf-8'));

              return {
                statusCode: 200,
                body: JSON.stringify(json),
                headers: {
                  'Content-Type': 'application/json'
                }
              };
            } catch (error) {
              return {
                statusCode: 500,
                body: JSON.stringify(error),
                headers: {
                  'Content-Type': 'application/json'
                }
              };
            }
          };
      Environment:
        Variables:
          ATHENA_RESULTS_BUCKET: !Sub "${AWS::AccountId}-dl-athena-results"
          ATHENA_RESULTS_KEY: "path/to/your/data/file.json"
      Timeout: 30

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::AccountId}-dl-athena-results/*"
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

  AthenaResultsDataApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "AthenaResultsDataApi"
      Description: "API for accessing Athena results data"

  AthenaResultsDataResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt AthenaResultsDataApi.RootResourceId
      PathPart: "athena-results-data"
      RestApiId: !Ref AthenaResultsDataApi

  AthenaResultsDataGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      ResourceId: !Ref AthenaResultsDataResource
      RestApiId: !Ref AthenaResultsDataApi
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - { Region: !Ref "AWS::Region", LambdaArn: !GetAtt AthenaResultsDataLambda.Arn }

  LambdaApiGatewayPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref AthenaResultsDataLambda
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${Region}:${AccountId}:${ApiId}/*/GET/athena-results-data"
        - { Region: !Ref "AWS::Region", AccountId: !Ref "AWS::AccountId", ApiId: !Ref AthenaResultsDataApi }

Outputs:
  BronzeBucketName:
    Description: "Name of the Bronze S3 bucket"
    Value: !Ref BronzeBucket

  SilverBucketName:
    Description: "Name of the Silver S3 bucket"
    Value: !Ref SilverBucket

  GoldBucketName:
    Description: "Name of the Gold S3 bucket"
    Value: !Ref GoldBucket

  AthenaResultsBucketName:
    Description: "Name of the Athena results S3 bucket"
    Value: !Ref AthenaResultsBucket

  GlueDatabaseName:
    Description: "Name of the Glue database"
    Value: !Ref GlueDatabase

  GlueETLJobJasminIngestName:
    Description: "Name of the Glue ETL job for ingesting data from Jasmin API"
    Value: !Ref GlueETLJobIngestJasmin

  GlueETLJobDDBBIngestName:
    Description: "Name of the Glue ETL job for ingesting data from MongoDB"
    Value: !Ref GlueETLJobIngestMongo

  BronzeCrawlerName:
    Description: "Name of the Glue Crawler for the Bronze data"
    Value: !Ref BronzeCrawler

  SilverCrawlerName:
    Description: "Name of the Glue Crawler for the Silver data"
    Value: !Ref SilverCrawler

  GoldCrawlerName:
    Description: "Name of the Glue Crawler for the Gold data"
    Value: !Ref GoldCrawler

  AthenaWorkGroupName:
    Description: "Name of the Athena work group"
    Value: !Ref AthenaWorkGroup

  AthenaResultsDataApiUrl:
    Description: "URL of the API for accessing Athena results data"
    Value: !Sub "https://${AthenaResultsDataApi}.execute-api.${AWS::Region}.amazonaws.com/prod/athena-results-data"
